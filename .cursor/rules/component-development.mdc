---
description: Component development rules - mandatory audit and reuse patterns
globs: ["resources/js/components/**/*.tsx", "resources/js/components/**/*.ts"]
alwaysApply: false
---

# Component Development Rules

## ðŸš¨ MANDATORY: Before Creating Any Component

### 1. Audit Existing Components
You MUST check these directories for reusable patterns:
- `@/components/ui/` - shadcn/ui components (Button, Card, Input, Dialog, etc.)
- `@/components/` - feature components (AppHeader, AppSidebar, UserInfo, etc.)
- `@/hooks/` - utility hooks (useAppearance, useIsMobile, useClipboard, etc.)

### 2. Available Reusable Components
**UI Components**: Button, Card, Input, Dialog, DropdownMenu, Sheet, Tooltip, Avatar, Badge, Checkbox, Label, Select, Separator, NavigationMenu, Collapsible, Toggle, ToggleGroup

**Layout Components**: AppShell, AppSidebar, AppHeader, AppContent

**Feature Components**: UserInfo, AlertError, Icon, Breadcrumbs, NavMain, NavFooter, NavUser

**Utility Hooks**: useAppearance, useIsMobile, useClipboard, useInitials, useTwoFactorAuth

### 3. Component Reuse Priority
```typescript
// âœ… ALWAYS check if existing components can be extended
import { Button, buttonVariants } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { useAppearance } from '@/hooks/use-appearance';
```

## ðŸŽ¯ Code Quality Standards

### Component Template
```typescript
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const componentVariants = cva(
  "base-classes",
  {
    variants: {
      variant: {
        default: "default-styles",
        secondary: "secondary-styles",
      },
      size: {
        sm: "small-styles",
        lg: "large-styles",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "sm",
    },
  }
);

interface ComponentProps extends React.ComponentProps<"div">, VariantProps<typeof componentVariants> {}

function Component({ className, variant, size, ...props }: ComponentProps) {
  return (
    <div
      data-slot="component"
      className={cn(componentVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Component, componentVariants };
export type { ComponentProps };
```

### Required Patterns
- **ALWAYS** use `cn()` from `@/lib/utils` for className merging
- **ALWAYS** include `data-slot` attribute
- **ALWAYS** use CSS variables for colors (e.g., `bg-primary`, `text-muted-foreground`)
- **ALWAYS** include dark mode variants
- **ALWAYS** use consistent spacing (gap-4, px-6, py-4, etc.)
- **ALWAYS** include focus-visible styles
- **ALWAYS** include aria-invalid styles for form validation

## ðŸš€ Extension Patterns

### Extend Existing Component
```typescript
import { Button, buttonVariants } from '@/components/ui/button';

const academicButtonVariants = cva(
  buttonVariants({ variant: "default" }),
  {
    variants: {
      academic: {
        primary: "bg-academic-primary text-white",
        secondary: "bg-academic-secondary text-academic-primary",
      },
    },
  }
);
```

### Compose Multiple Components
```typescript
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

function AcademicCard({ title, content, actionText }: Props) {
  return (
    <Card>
      <CardHeader>
        <h3>{title}</h3>
      </CardHeader>
      <CardContent>
        <p>{content}</p>
        <Button>{actionText}</Button>
      </CardContent>
    </Card>
  );
}
```

## ðŸ“‹ Quality Checklist
- [ ] Uses `cn()` utility for className merging
- [ ] Includes `data-slot` attribute
- [ ] Supports dark mode
- [ ] Includes proper TypeScript types
- [ ] Follows accessibility standards
- [ ] Uses consistent spacing and colors
- [ ] Exports both component and types
- [ ] Keyboard navigation works
- [ ] Screen reader accessible